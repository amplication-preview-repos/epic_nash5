/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Request } from "./Request";
import { RequestCountArgs } from "./RequestCountArgs";
import { RequestFindManyArgs } from "./RequestFindManyArgs";
import { RequestFindUniqueArgs } from "./RequestFindUniqueArgs";
import { CreateRequestArgs } from "./CreateRequestArgs";
import { UpdateRequestArgs } from "./UpdateRequestArgs";
import { DeleteRequestArgs } from "./DeleteRequestArgs";
import { ResponseFindManyArgs } from "../../response/base/ResponseFindManyArgs";
import { Response } from "../../response/base/Response";
import { User } from "../../user/base/User";
import { RequestService } from "../request.service";
@graphql.Resolver(() => Request)
export class RequestResolverBase {
  constructor(protected readonly service: RequestService) {}

  async _requestsMeta(
    @graphql.Args() args: RequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Request])
  async requests(
    @graphql.Args() args: RequestFindManyArgs
  ): Promise<Request[]> {
    return this.service.requests(args);
  }

  @graphql.Query(() => Request, { nullable: true })
  async request(
    @graphql.Args() args: RequestFindUniqueArgs
  ): Promise<Request | null> {
    const result = await this.service.request(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Request)
  async createRequest(
    @graphql.Args() args: CreateRequestArgs
  ): Promise<Request> {
    return await this.service.createRequest({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Request)
  async updateRequest(
    @graphql.Args() args: UpdateRequestArgs
  ): Promise<Request | null> {
    try {
      return await this.service.updateRequest({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Request)
  async deleteRequest(
    @graphql.Args() args: DeleteRequestArgs
  ): Promise<Request | null> {
    try {
      return await this.service.deleteRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Response], { name: "responses" })
  async findResponses(
    @graphql.Parent() parent: Request,
    @graphql.Args() args: ResponseFindManyArgs
  ): Promise<Response[]> {
    const results = await this.service.findResponses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Request): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
